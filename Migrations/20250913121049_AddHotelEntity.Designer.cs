// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisitaBookingApi.Data;

#nullable disable

namespace visita_booking_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250913121049_AddHotelEntity")]
    partial class AddHotelEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VisitaBookingApi.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GoogleId")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("VisitaBookingApi.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("VisitaBookingApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular guest users",
                            Name = "Guest"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Hotel owners/managers",
                            Name = "Hotel"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "System administrators",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("VisitaBookingApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Local");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ExternalId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@visita.ph",
                            FirstName = "System",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Administrator",
                            PasswordHash = "$2a$11$sXq9mWnUN0Gy2UtgD6QZ3eYfngx161BKuQlI3IOV0aQmu34NJDeBq",
                            Provider = "Local"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "hotel@example.com",
                            FirstName = "Jane",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Smith",
                            PasswordHash = "$2a$11$sXq9mWnUN0Gy2UtgD6QZ3eYfngx161BKuQlI3IOV0aQmu34NJDeBq",
                            Provider = "Local"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "guest@example.com",
                            FirstName = "John",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Doe",
                            PasswordHash = "$2a$11$sXq9mWnUN0Gy2UtgD6QZ3eYfngx161BKuQlI3IOV0aQmu34NJDeBq",
                            Provider = "Local"
                        });
                });

            modelBuilder.Entity("VisitaBookingApi.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 3,
                            AssignedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2,
                            AssignedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1,
                            AssignedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("VisitaBookingApi.Models.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SessionToken");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ParentAmenityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("ParentAmenityId");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 1,
                            Icon = "ac-unit",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(3857),
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = 2,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 2,
                            Icon = "whatshot",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6506),
                            Name = "Heating"
                        },
                        new
                        {
                            Id = 3,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 3,
                            Icon = "deck",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6514),
                            Name = "Balcony"
                        },
                        new
                        {
                            Id = 4,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 4,
                            Icon = "location-city",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6515),
                            Name = "City View"
                        },
                        new
                        {
                            Id = 5,
                            Category = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 5,
                            Icon = "waves",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6517),
                            Name = "Ocean View"
                        },
                        new
                        {
                            Id = 6,
                            Category = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 1,
                            Icon = "wifi",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6531),
                            Name = "Free WiFi"
                        },
                        new
                        {
                            Id = 7,
                            Category = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 2,
                            Icon = "tv",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6532),
                            Name = "Smart TV"
                        },
                        new
                        {
                            Id = 8,
                            Category = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 3,
                            Icon = "usb",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6534),
                            Name = "USB Charging Ports"
                        },
                        new
                        {
                            Id = 9,
                            Category = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 4,
                            Icon = "speaker",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6535),
                            Name = "Bluetooth Speaker"
                        },
                        new
                        {
                            Id = 10,
                            Category = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 1,
                            Icon = "bathroom",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6537),
                            Name = "Private Bathroom"
                        },
                        new
                        {
                            Id = 11,
                            Category = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 2,
                            Icon = "shower",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6539),
                            Name = "Shower"
                        },
                        new
                        {
                            Id = 12,
                            Category = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 3,
                            Icon = "bathtub",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6540),
                            Name = "Bathtub"
                        },
                        new
                        {
                            Id = 13,
                            Category = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 4,
                            Icon = "dry",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6541),
                            Name = "Hair Dryer"
                        },
                        new
                        {
                            Id = 14,
                            Category = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 5,
                            Icon = "soap",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6542),
                            Name = "Toiletries"
                        },
                        new
                        {
                            Id = 15,
                            Category = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 1,
                            Icon = "kitchen",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6544),
                            Name = "Mini Fridge"
                        },
                        new
                        {
                            Id = 16,
                            Category = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 2,
                            Icon = "coffee-maker",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6545),
                            Name = "Coffee Maker"
                        },
                        new
                        {
                            Id = 17,
                            Category = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 3,
                            Icon = "microwave",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6546),
                            Name = "Microwave"
                        },
                        new
                        {
                            Id = 18,
                            Category = 5,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 1,
                            Icon = "gpp-good",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6548),
                            Name = "Safe"
                        },
                        new
                        {
                            Id = 19,
                            Category = 5,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 2,
                            Icon = "smoke-free",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6549),
                            Name = "Smoke Detector"
                        },
                        new
                        {
                            Id = 20,
                            Category = 5,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "",
                            DisplayOrder = 3,
                            Icon = "medical-services",
                            IsActive = true,
                            LastModified = new DateTime(2025, 9, 13, 12, 10, 49, 334, DateTimeKind.Utc).AddTicks(6551),
                            Name = "First Aid Kit"
                        });
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.HolidayCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("HolidayType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNational")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("PriceMultiplier")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Date", "Country");

                    b.ToTable("HolidayCalendar");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BusinessRegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("CheckOutTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("HasGym")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasParking")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasPool")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasRestaurant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasSpa")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasWifi")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsVerified");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Rating");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CacheVersion")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DefaultPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxGuests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("IsActive");

                    b.HasIndex("MaxGuests");

                    b.HasIndex("Name");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.RoomAmenity", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("RoomId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("RoomAmenities");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.RoomAvailabilityOverride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("OverridePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId", "Date")
                        .IsUnique();

                    b.ToTable("RoomAvailabilityOverrides");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.RoomPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AltText")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CdnUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("S3Key")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("S3Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("RoomId", "DisplayOrder");

                    b.ToTable("RoomPhotos");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.RoomPriceCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AvgPrice30Days")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("AvgPrice90Days")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataValidUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("HolidayMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(1.0m);

                    b.Property<DateTime>("LastPricingRuleChange")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastSearched")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("MaxPrice30Days")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MaxPrice90Days")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MinPrice30Days")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MinPrice90Days")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("PeakSeasonMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(1.0m);

                    b.Property<int>("PriceBand")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("SearchHitCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("WeekendMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(1.0m);

                    b.HasKey("Id");

                    b.HasIndex("DataValidUntil");

                    b.HasIndex("LastUpdated");

                    b.HasIndex("PriceBand");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("MinPrice30Days", "MaxPrice30Days");

                    b.HasIndex("MinPrice90Days", "MaxPrice90Days");

                    b.ToTable("RoomPriceCaches");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.RoomPricingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("FixedPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MinimumNights")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("RuleType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StartDate", "EndDate");

                    b.HasIndex("RoomId", "RuleType", "IsActive");

                    b.ToTable("RoomPricingRules");
                });

            modelBuilder.Entity("VisitaBookingApi.Models.RefreshToken", b =>
                {
                    b.HasOne("VisitaBookingApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisitaBookingApi.Models.UserRole", b =>
                {
                    b.HasOne("VisitaBookingApi.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisitaBookingApi.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisitaBookingApi.Models.UserSession", b =>
                {
                    b.HasOne("VisitaBookingApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.Amenity", b =>
                {
                    b.HasOne("visita_booking_api.Models.Entities.Amenity", "ParentAmenity")
                        .WithMany("ChildAmenities")
                        .HasForeignKey("ParentAmenityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentAmenity");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.Hotel", b =>
                {
                    b.HasOne("VisitaBookingApi.Models.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.Room", b =>
                {
                    b.HasOne("visita_booking_api.Models.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.RoomAmenity", b =>
                {
                    b.HasOne("visita_booking_api.Models.Entities.Amenity", "Amenity")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("visita_booking_api.Models.Entities.Room", "Room")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.RoomAvailabilityOverride", b =>
                {
                    b.HasOne("visita_booking_api.Models.Entities.Room", "Room")
                        .WithMany("AvailabilityOverrides")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.RoomPhoto", b =>
                {
                    b.HasOne("visita_booking_api.Models.Entities.Room", "Room")
                        .WithMany("Photos")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.RoomPriceCache", b =>
                {
                    b.HasOne("visita_booking_api.Models.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.RoomPricingRule", b =>
                {
                    b.HasOne("visita_booking_api.Models.Entities.Room", "Room")
                        .WithMany("PricingRules")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("VisitaBookingApi.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("VisitaBookingApi.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.Amenity", b =>
                {
                    b.Navigation("ChildAmenities");

                    b.Navigation("RoomAmenities");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.Hotel", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("visita_booking_api.Models.Entities.Room", b =>
                {
                    b.Navigation("AvailabilityOverrides");

                    b.Navigation("Photos");

                    b.Navigation("PricingRules");

                    b.Navigation("RoomAmenities");
                });
#pragma warning restore 612, 618
        }
    }
}
